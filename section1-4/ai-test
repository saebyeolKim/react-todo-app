# 🐳 Docker Study Guide

비전공자도 이해할 수 있도록 구성된 Docker 입문부터 실전까지 정리한 자료입니다. 실습 중심으로 도커의 핵심 개념과 CLI, Volume, Dockerfile 활용, 실전 프로젝트 배포까지 단계별로 다룹니다.

---

## 🌱 Docker 기본 개념

### 1-1. Docker를 배우는 이유

> 이식성: 특정 프로그램을 다른 곳으로 쉽게 옮겨서 설치 및 실행할 수 있는 특성

* 매번 귀찮은 **설치 과정을 일일이 거치지 않아도 된다.**
* **항상 일관되게** 프로그램을 설치할 수 있다. (버전, 환경 설정, 옵션, 운영 체제 등)
* 각 프로그램이 독립적인 환경에서 실행되기 때문에 **프로그램 간에 충돌이 일어나지 않는다.**

---

### 1-2. IP와 Port의 개념

* **IP**: 특정 컴퓨터를 가리키는 주소
* **Port**: 한 컴퓨터 내에서 실행 중인 특정 프로그램의 주소

---

### 1-3. Docker? Container? Image?

* ✅ **Docker**: 컨테이너를 사용하여 프로그램을 **분리된 환경**에서 실행 및 관리하는 플랫폼
* ✅ **Container**: 하나의 컴퓨터에서 여러 독립적인 컴퓨터 환경을 구성해 각각의 프로그램을 설치 및 실행하는 단위 (미니 컴퓨터 느낌)

  * 컨테이너를 포함하는 컴퓨터는 **호스트 컴퓨터**
  * 컨테이너는 자체 디스크와 네트워크(IP, Port)를 갖는다
* ✅ **Image**: 실행 가능한 컨테이너를 만들기 위한 **템플릿**. (ex. 닌텐도 게임칩 같은 개념)

---

### 1-4. Docker 전체 흐름 느껴보기 (Nginx 예시)

Docker로 nginx를 설치하고 실행하는 전체 흐름을 체험해보자.

* Nginx 이미지 설치

  ![nginx 설치](https://github.com/user-attachments/assets/4d524299-e851-480d-8116-43e86d659536)

* 웹서버 실행 확인

  ![실행 확인1](https://github.com/user-attachments/assets/aa7db88a-2950-463b-8e0f-69321b6c6005)
  ![실행 확인2](https://github.com/user-attachments/assets/49fa4f25-574f-4ccd-997e-8ce60054dbb8)

* 실행 중인지 확인

  ![실행 확인3](https://github.com/user-attachments/assets/697d2bd6-c0e8-4196-a9d2-5b8be0f2c5d2)

---

## 🔧 Docker CLI 익히기

### 2-1. 이미지 다운로드 / 조회 / 삭제

```bash
docker pull [이미지명]              # 이미지 다운로드
docker image ls                    # 이미지 목록 조회
docker image rm [이미지ID 일부]     # 이미지 삭제
docker image rm -f [이미지ID]       # 강제 삭제
```

> 에러 예시:
>
> ```
> Error response from daemon: conflict: unable to delete ... - image is being used by stopped container ...
> ```

추가 명령어:

```bash
docker image rm $(docker images -q)         # 전체 이미지 삭제 (사용되지 않은 것만)
docker image rm -f $(docker images -q)      # 강제 전체 삭제
docker image rm ID1 ID2                     # 여러 이미지 삭제
```

---

### 2-2. 컨테이너 생성 / 실행

```bash
docker create nginx              # 컨테이너 생성
docker ps -a                    # 전체 컨테이너 목록 조회
docker start [컨테이너ID]        # 컨테이너 실행
docker create mysql             # 없는 이미지도 자동 다운로드
```

![컨테이너 생성 후 조회](https://github.com/user-attachments/assets/307fc7e9-64eb-4eac-b101-1cec1e4b5cbd)

```bash
docker run [이미지명]           # create + start 한 번에 실행
```

* foreground(포그라운드): 실시간으로 터미널에서 실행됨
* background(백그라운드): 터미널을 점유하지 않고 백그라운드에서 실행됨

```bash
docker run -d nginx                             # 백그라운드 실행
docker run -d --name my-web-server nginx        # 이름 부여 후 실행
```

> ⚠️ localhost 접속이 안 되는 이유: 호스트와 컨테이너의 네트워크가 분리되어 있음

```bash
docker run -d -p 4001:80 nginx                  # 포트 연결: 호스트 4001 → 컨테이너 80
```

![포트 연결](https://github.com/user-attachments/assets/19706335-8d1a-4ccf-bb9b-b8cd909e682d)

---

### 2-3. 컨테이너 조회 / 중지 / 삭제

```bash
docker ps                        # 실행 중인 컨테이너만 조회
docker ps -a                    # 전체 컨테이너 조회
docker stop [ID]                # 안전하게 중지
docker kill [ID]                # 강제 중지
docker rm $(docker ps -qa)      # 전체 컨테이너 삭제
docker rm -f [ID]               # 실행 중인 컨테이너 강제 삭제
```

---

### 2-4. 컨테이너 로그 조회

```bash
docker logs [ID]                        # 전체 로그

docker logs --tail 10 [ID]              # 최근 10줄

docker logs -f [ID]                     # 실시간 로그

docker logs --tail 0 -f [ID]            # 이후 로그만 실시간으로 보기
```

---

### 2-5. 컨테이너 내부 접속 (exec -it)

```bash
docker exec -it [ID] bash     # bash 쉘로 컨테이너 내부 접속
exit                         # 종료
```

![컨테이너 내부 접속](https://github.com/user-attachments/assets/73713df5-f031-4651-a0f2-049f42830e75)

---

## 💾 Docker Volume: 데이터 유실 방지

### 3-1. Docker Volume 개념

**문제점:**
컨테이너를 새로 만들면 기존 컨테이너의 데이터는 사라진다 (MySQL 예시 등).

**해결책:**
**Volume**을 이용하면 **데이터를 호스트 측에 영구 저장**할 수 있다.

```bash
docker run -v [호스트 절대경로]:[컨테이너 경로] [이미지명]
```

* 호스트 디렉토리가 존재 → 해당 디렉토리가 컨테이너 경로를 덮어씀
* 없을 경우 자동 생성됨

---

### 3-2. MySQL 실행 + Volume 적용

```bash
docker run -p 3306:3306 -d mysql                      # 기본 실행 (ps에 안 나올 수도 있음)
docker run -e MYSQL_ROOT_PASSWORD=1234 -d -p 3306:3306 mysql   # 환경변수 설정 시 정상 실행
```

> 환경변수: `-e MYSQL_ROOT_PASSWORD=1234`

```bash
cd Users/User/Downloads
mkdir docker-mysql
cd docker-mysql

# 로컬 폴더를 볼륨으로 연결

docker run -e MYSQL_ROOT_PASSWORD=1234 \
  -d -p 3306:3306 \
  -v /Users/User/Downloads/docker-mysql/mysql-data:/var/lib/mysql \
  mysql
```

❗ **Permission Denied 발생 시 주의:**

* Windows NTFS는 `chown` 명령어를 허용하지 않기 때문에 마운트에 실패할 수 있음

**해결 방법 (Docker Volume 사용)**

```bash
docker volume create mysql-data

docker run -e MYSQL_ROOT_PASSWORD=password123 \
  -p 3306:3306 \
  -v mysql-data:/var/lib/mysql \
  -d --name my-mysql \
  mysql:8.0
```

🔍 실제 저장 위치 확인 (WSL2 기준):

```bash
docker volume inspect mysql-data
```

✅ 컨테이너 제거 후 다시 실행해도 DB는 유지됨!

⚠️ 비밀번호를 바꾸면 접근 불가 (초기 설정 유지됨)
⚠️ 기존 폴더가 있으면 덮어씌워져 실행 실패 가능성 있음

---

### 3-3. PostgreSQL 실행

```bash
mkdir C:\docker-postgresql
cd C:\docker-postgresql

docker run -e POSTGRES_PASSWORD=psssword123 \
  -p 5432:5432 \
  -v "C:\\docker-postgresql\\postgresql-data:/var/lib/postgresql/data" \
  -d postgres
```

![postgres 실행](https://github.com/user-attachments/assets/5b1b845b-e011-47da-8d09-a2d1cdb2b6e7)

---

### 3-4. MongoDB 실행

```bash
mkdir docker-mongodb
cd .\docker-mongodb\

docker run -e MONGO_INITDB_ROOT_USERNAME=root \
  -e MONGO_INITDB_ROOT_PASSWORD=password123 \
  -p 27017:27017 \
  -v "C:\\docker-mongodb\\mongodb-data:/data/db" \
  -d mongo
```

![mongo 실행](https://github.com/user-attachments/assets/1a159daa-ca1d-410e-8cd8-29780710b508)

---

> 다음 내용부터는 Dockerfile로 이미지 만들기 섹션입니다. 계속 정리하길 원하시면 다음 부분도 보내주세요!
